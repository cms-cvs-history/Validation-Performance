#!/usr/bin/perl
#GBenelli Dec21 
#This script is designed to run on a local directory 
#after the user has created a local CMSSW release,
#initialized its environment variables by executing
#in the release /src directory:
#eval `scramv1 runtime -csh`
#project CMSSW
#The script will create a SimulationCandles.txt ASCII
#file, input to cmsRelvalreport.py, to launch the 
#standard simulation performance suite.

#Input arguments are three:
#1-Number of events to put in the cfg files
#2-Name of the candle(s) to process (either AllCandles, or NameOfTheCandle)
#3-Profiles to run (with code below)
#E.g.: ./cmsSimPyRelVal.pl 50 AllCandles 012

#Get some environment variables to use
$CMSSW_BASE=$ENV{'CMSSW_BASE'};
$CMSSW_RELEASE_BASE=$ENV{'CMSSW_RELEASE_BASE'};
#Adding a check for a local version of the packages
$PyRelValPkg="$CMSSW_BASE/src/Configuration/PyReleaseValidation";
if (-e $PyRelValPkg)
{
    $BASE_PYRELVAL=$PyRelValPkg;
    print "**[cmsSimPyRelVal.pl]Using LOCAL version of Configuration/PyReleaseValidation instead of the RELEASE version**\n";
}
else
{
    $BASE_PYRELVAL="$CMSSW_RELEASE_BASE/src/Configuration/PyReleaseValidation";
}
#Setting the path for the cmsDriver.py command:
$cmsDriver="$BASE_PYRELVAL/scripts/cmsDriver.py";

if ($#ARGV != 2) {
	print "Usage: cmsSimPyRelVal.pl NumberOfEventsPerCfgFile Candles Profile
Candles codes:
 AllCandles
 \"HZZLLLL\"
 \"MINBIAS\"
 \"E -e 1000\"
 \"MU- -e pt10\"
 \"PI- -e 1000\"
 \"TTBAR\"
 \"QCD -e 80_120\"
Profile codes (multiple codes can be used):
 0-TimingReport
 1-TimeReport
 2-SimpleMemoryCheck
 3-EdmSize
 4-IgProfPerf
 5-IgProfMemTotal
 6-IgProfMemLive
 7-IgProfAnalyse
 8-ValgrindFCE
 9-ValgrindMemCheck
 9-SimpleMemoryCheck
E.g: cmsSimulationCandles.pl 10 AllCandles 1 OR cmsSimulationCandles.pl 50 HiggsZZ4LM190 012\n";
	exit;
}
$NumberOfEvents=$ARGV[0];
$WhichCandles=$ARGV[1];
$ProfileCode=$ARGV[2];

#Getting some important environment variables:
$CMSSW_RELEASE_BASE=$ENV{'CMSSW_RELEASE_BASE'};
$CMSSW_VERSION=$ENV{'CMSSW_VERSION'};

if ($WhichCandles eq "AllCandles")
{
    @Candle=("HZZLLLL",
	     "MINBIAS",
	     "E -e 1000",
	     "MU- -e pt10",
	     "PI- -e 1000",
	     "TTBAR",
	     "QCD -e 80_120"
	     );
    print "ALL standard simulation candles will be PROCESSED:\n";
    foreach (@Candle)
    {
	print "$_\n";
    }
}
else
{
   
    @Candle=($WhichCandles);
    print "ONLY @Candle will be PROCESSED\n";
}
#Need a little hash to match the candle with the ROOT name used by cmsDriver.py.
%FileName=(
	   "HZZLLLL"=>"HZZLLLL_190",
	    "MINBIAS"=>"MINBIAS_",
	    "E -e 1000"=>"E_1000",
	    "MU- -e pt10"=>"MU-_pt10",
	    "PI- -e 1000"=>"PI-_1000",
	    "TTBAR"=>"TTBAR_",
	    "QCD -e 80_120"=>"QCD_80_120"
	   );
#Creating and opening the ASCII input file for the relvalreport script:
$SimCandlesFile= "SimulationCandles"."_".$CMSSW_VERSION.".txt";
open(SIMCANDLES,">$SimCandlesFile")||die "Couldn't open $SinCandlesFile to save - $!\n";
print SIMCANDLES "#Candles file automatically generated by cmsSimPyRelVal.pl for $CMSSW_VERSION\n\n";
#For now the two steps are built in, this can be added as an argument later
@Step=(
       "GEN,SIM",
       #"SIM",#To run SIM only need GEN done already!
       "DIGI",
       #Adding RECO step
       "RECO"
       );
#Convenient hash to map the correct Simulation Python fragment:
%SimPython=(
	    "GEN,SIM"=>"SimulationG4.py",
	    #"SIM"=>"SimulationG4.py", #To run SIM only need GEN done already!
	    "DIGI"=>"Simulation.py",
	    #Adding RECO step
	    "RECO"=>"Simulation.py"
	   );
#The allowed profiles are:
@AllowedProfile=(
	  "TimingReport",
	  "TimeReport",
	  "SimpleMemReport",
	  "EdmSize",
	  "IgProfperf",
	  "IgProfMemTotal",
	  "IgProfMemLive",
	  "IgProfMemAnalyse",
	  "valgrind",
	  "memcheck_valgrind"
	   );
#Based on the profile code create the array of profiles to run:
for ($i=0;$i<10;$i++)
{
    if ($ProfileCode=~/$i/)
    {
	if (((($i==0)&&(($ProfileCode=~/1/)||($ProfileCode=~/2/)))||(($i==1)&&($ProfileCode=~/2/)))||((($i==5)&&(($ProfileCode=~/6/)||($ProfileCode=~/7/)))||(($i==6)&&($ProfileCode=~/7/))))
	{
	    $Profile[++$#Profile]="$AllowedProfile[$i]"." @@@ reuse";
	}
	else
	{
	    $Profile[++$#Profile]=$AllowedProfile[$i];
	}
    }
}
#Hash for the profiler to run
%Profiler=(
	   "TimingReport"=>"Timing_Parser",
	   "TimingReport @@@ reuse"=>"Timing_Parser",#Ugly fix to be able to handle the reuse case
	   "TimeReport"=>"Timereport_Parser",
	   "TimeReport @@@ reuse"=>"Timereport_Parser",#Ugly fix to be able to handle the reuse case
	   "SimpleMemReport"=>"SimpleMem_Parser",
           "EdmSize"=>"Edm_Size",
	   "IgProfperf"=>"IgProf_perf.PERF_TICKS",
	   "IgProfMemTotal"=>"IgProf_mem.MEM_TOTAL",
	   "IgProfMemTotal @@@ reuse"=>"IgProf_mem.MEM_TOTAL",#Ugly fix to be able to handle the reuse case
	   "IgProfMemLive"=>"IgProf_mem.MEM_LIVE",
	   "IgProfMemLive @@@ reuse"=>"IgProf_mem.MEM_LIVE",#Ugly fix to be able to handle the reuse case
	   "IgProfMemAnalyse"=>"IgProf_mem.ANALYSE",
	   "valgrind"=>"ValgrindFCE",
	   "memcheck_valgrind"=>"Memcheck_Valgrind"
	   );
foreach (@Candle)
{
    $candle=$_;
    foreach (@Step)
    {
	print SIMCANDLES "#$FileName{$candle}\n";
	$step=$_;
	print SIMCANDLES "#Step $step\n";
	foreach (@Profile)
	{
	    if ($_ eq "EdmSize")
	    {
		if ($step eq "GEN,SIM") #Hack since we use SIM and not GEN,SIM extension (to facilitate DIGI)
		{
		    $step="SIM";
		}
		$Command="$FileName{$candle}"."_"."$step".".root ";
	    }
	    else
	    {
		$OutputFileOption="";
		$OutputStep=$step;
		if ($step eq "GEN,SIM") #Hack since we use SIM and not GEN,SIM extension (to facilitate DIGI)
		{
		    $OutputFileOption="--fileout=$FileName{$candle}"."_SIM.root";
		    $OutputStep="SIM";
		}
		$Command="$cmsDriver $candle -n $NumberOfEvents --step=$step $OutputFileOption --customise=$SimPython{$step} ";
	    }
	    print SIMCANDLES "$Command @@@ $Profiler{$_} @@@ $FileName{$candle}_"."$OutputStep"."_"."$_"."\n";
	}
    }
}
exit;
